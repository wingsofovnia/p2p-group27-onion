package de.tum.p2p.samples;

import java.security.KeyFactory;
import java.security.PublicKey;
import java.security.spec.X509EncodedKeySpec;

public final class FakeKeys {

    private static final byte[] key = {48, -126, 1, 34, 48, 13, 6, 9, 42, -122, 72, -122,
        -9, 13, 1, 1, 1, 5, 0, 3, -126, 1, 15, 0, 48, -126, 1, 10, 2, -126, 1, 1, 0, -41,
        -62, 70, -94, 117, 71, 91, 81, 104, 83, 52, 68, 75, 95, -60, -41, -69, 16, -86, 13,
        -24, 44, 7, -113, -13, 68, 110, 34, 125, -61, -19, -18, -47, -76, 0, -68, -99, 113,
        4, 98, -90, -20, 119, -55, 77, -120, 3, 110, -11, -90, 21, -29, -14, 74, 61, 9, -121,
        -128, 81, 96, -53, 0, -64, 16, 28, -68, 4, 67, -125, 80, 8, -56, -126, 92, 48, 26,
        -112, -5, 76, -97, -104, -125, -47, -100, 92, 8, -98, 113, 78, 127, -47, -81, 63,
        -48, -50, 49, -1, 52, 88, 49, 112, -56, -44, 99, 88, -51, 57, 123, 93, -115, -125,
        -127, -51, -8, 83, -127, 3, 99, 79, -2, 52, -124, 39, 125, -42, -41, -75, 24, 81, 59,
        116, -50, 6, 117, -61, 22, 4, 94, -47, -90, 102, -43, -55, -7, -77, -58, 123, 90, -87,
        -46, -58, -36, 124, 104, 68, 48, 106, 42, -121, 106, -28, 124, 68, 113, 123, 99, 76,
        116, -29, -91, 28, 46, -48, 60, -31, -47, -99, 6, -112, -35, -28, -46, 30, 99, -114,
        13, 56, -84, -120, -72, -3, -52, 92, -102, 47, -52, -115, 78, -55, -65, 75, -103, -62,
        78, -47, -47, -67, -74, -106, 104, 36, 55, 2, 23, -82, 57, -63, 9, -54, 42, -12, -13,
        31, 54, 84, 38, 97, 18, -128, 126, -1, 125, 29, 56, -110, -82, -128, -68, -76, 76, 54,
        -29, 96, 122, 96, -29, 67, -35, -71, -76, 25, 30, -78, 48, 81, 117, 2, 3, 1, 0, 1};

    private static final String HOSTKEY_ALG = "RSA";

    private FakeKeys() {
        throw new AssertionError("No instance for you");
    }

    public static PublicKey fakePublicKey() {
        try {
            KeyFactory keyFactory = KeyFactory.getInstance(HOSTKEY_ALG);
            return keyFactory.generatePublic(new X509EncodedKeySpec(key));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}
